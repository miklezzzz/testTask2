version: 2
jobs:
  buildAndPush:
    docker:
      - image: circleci/buildpack-deps:bionic
    steps:
      - checkout
      - setup_remote_docker:
      - run:
          name: Set the tag for the image
          command: if [ "$CIRCLE_BRANCH" == "develop" ]; then echo 'export TAG=develop' >> $BASH_ENV; elif [[ "$CIRCLE_BRANCH" == release-* ]]; then echo 'export TAG=${CIRCLE_BRANCH}' >> $BASH_ENV; elif [[ "$CIRCLE_TAG" == prodbuild* ]]; then echo 'export TAG=$CIRCLE_TAG' >> $BASH_ENV; fi
      - run:
          name: Build and push images
          command: |
            docker build -t $DOCKER_USER/simple-api-php:$TAG . -f Dockerfile.php
            docker build -t $DOCKER_USER/simple-api-web:$TAG . -f Dockerfile.web
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker push $DOCKER_USER/simple-api-php:$TAG
            docker push $DOCKER_USER/simple-api-web:$TAG

  lint:
    docker:
      - image: circleci/buildpack-deps:bionic
    steps:
      - checkout
      - run:
          name: Run linter
          command: echo "FAKE LINTER HERE"

  test:
    docker:
      - image: circleci/buildpack-deps:bionic
    steps:
      - checkout
      - run:
          name: Run tests
          command: echo "FAKE TESTS HERE"

  deployDevelopment:
    docker:
      - image: circleci/buildpack-deps:bionic
    steps:
      - checkout
      - setup_remote_docker:
      - run:
          name: Install and confgure kubectl
          command: sudo curl -L https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl && sudo chmod +x /usr/local/bin/kubectl

      - run:
          name: Prepare kubeconfig
          command: |
            sed -i "s/east-k8s/$host/" ./.kube/config
            sed -i "s/west-k8s/$host/" ./.kube/config
            sed -i "s/admin-token/$token/" ./.kube/config
            mkdir -p ~/.kube && cp ./.kube/config ~/.kube/config

      - run: 
          name: Install Helm
          command: |
            sudo curl https://get.helm.sh/helm-v3.0.3-linux-amd64.tar.gz -o /tmp/helm-v3.0.3-linux-amd64.tar.gz && cd /tmp && tar zxvf helm-v3.0.3-linux-amd64.tar.gz && sudo cp -v ./linux-amd64/helm /usr/local/bin/helm

      - run:
          name: EAST - Create Namespace && Deploy Release
          command: kubectl config use-context kube-east && bash scripts/createNs.sh development && helm upgrade --install simple-api --namespace development ./helm-chart/ --set php.mysql.db=development --set php.redis.ns=development --set web.ingress.host=development-east.95.215.71.23.nip.io --set php.tag=development --set web.tag=development --set timestamp="$(date +%s)" --set web.pullPolicy=Always --set php.pullPolicy=Always

      - run:
          name: WEST - Create Namespace && Deploy Release
          command: kubectl config use-context kube-west && bash scripts/createNs.sh development && helm upgrade --install simple-api --namespace development ./helm-chart/ --set php.mysql.db=development --set php.redis.ns=development --set web.ingress.host=development-west.95.215.71.23.nip.io --set php.tag=development --set web.tag=development --set timestamp="$(date +%s)" --set web.pullPolicy=Always --set php.pullPolicy=Always

  deployStaging:
    docker:
      - image: circleci/buildpack-deps:bionic
    steps:
      - checkout
      - setup_remote_docker:
      - run:
          name: Install and confgure kubectl
          command: sudo curl -L https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl && sudo chmod +x /usr/local/bin/kubectl

      - run:
          name: Prepare kubeconfig
          command: |
            sed -i "s/east-k8s/$host/" ./.kube/config
            sed -i "s/west-k8s/$host/" ./.kube/config
            sed -i "s/admin-token/$token/" ./.kube/config
            mkdir -p ~/.kube && cp ./.kube/config ~/.kube/config

      - run:
          name: Install Helm
          command: |
            sudo curl https://get.helm.sh/helm-v3.0.3-linux-amd64.tar.gz -o /tmp/helm-v3.0.3-linux-amd64.tar.gz && cd /tmp && tar zxvf helm-v3.0.3-linux-amd64.tar.gz && sudo cp -v ./linux-amd64/helm /usr/local/bin/helm

      - run:
          name: EAST - Create Namespace && Deploy Release
          command: kubectl config use-context kube-east && bash scripts/createNs.sh $CIRLCE_BRANCH && helm upgrade --install simple-api --namespace $CIRLCE_BRANCH ./helm-chart/ --set php.mysql.db=$CIRLCE_BRANCH --set php.redis.ns=$CIRLCE_BRANCH --set web.ingress.host=$CIRLCE_BRANCH-east.95.215.71.23.nip.io --set php.tag=$CIRLCE_BRANCH --set web.tag=$CIRLCE_BRANCH --set timestamp="$(date +%s)" --set web.pullPolicy=Always --set php.pullPolicy=Always

      - run:
          name: WEST - Create Namespace && Deploy Release
          command: kubectl config use-context kube-west && bash scripts/createNs.sh $CIRLCE_BRANCH && helm upgrade --install simple-api --namespace $CIRLCE_BRANCH ./helm-chart/ --set php.mysql.db=$CIRLCE_BRANCH --set php.redis.ns=$CIRLCE_BRANCH --set web.ingress.host=$CIRLCE_BRANCH-west.95.215.71.23.nip.io --set php.tag=$CIRLCE_BRANCH --set web.tag=$CIRLCE_BRANCH --set timestamp="$(date +%s)" --set web.pullPolicy=Always --set php.pullPolicy=Always

  deployProduction:
    docker:
      - image: circleci/buildpack-deps:bionic
    steps:
      - checkout
      - setup_remote_docker:
      - run:
          name: Install and confgure kubectl
          command: sudo curl -L https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl && sudo chmod +x /usr/local/bin/kubectl

      - run:
          name: Prepare kubeconfig
          command: |
            sed -i "s/east-k8s/$host/" ./.kube/config
            sed -i "s/west-k8s/$host/" ./.kube/config
            sed -i "s/admin-token/$token/" ./.kube/config
            mkdir -p ~/.kube && cp ./.kube/config ~/.kube/config

      - run:
          name: Install Helm
          command: |
            sudo curl https://get.helm.sh/helm-v3.0.3-linux-amd64.tar.gz -o /tmp/helm-v3.0.3-linux-amd64.tar.gz && cd /tmp && tar zxvf helm-v3.0.3-linux-amd64.tar.gz && sudo cp -v ./linux-amd64/helm /usr/local/bin/helm

      - run:
          name: EAST - Create Namespace && Deploy Release
          command: kubectl config use-context kube-east && bash scripts/createNs.sh production && helm upgrade --install simple-api --namespace production ./helm-chart/ --set php.mysql.db=$CIRLCE_TAG --set php.redis.ns=$CIRLCE_TAG --set web.ingress.host=$CIRLCE_TAG-east.95.215.71.23.nip.io --set php.tag=$CIRLCE_TAG --set web.tag=$CIRLCE_TAG --set timestamp="$(date +%s)" --set web.pullPolicy=IfNotPresent --set php.pullPolicy=IfNotPresent

      - run:
          name: WEST - Create Namespace && Deploy Release
          command: kubectl config use-context kube-west && bash scripts/createNs.sh production && helm upgrade --install simple-api --namespace production ./helm-chart/ --set php.mysql.db=$CIRLCE_TAG --set php.redis.ns=$CIRLCE_TAG --set web.ingress.host=$CIRLCE_TAG-west.95.215.71.23.nip.io --set php.tag=$CIRLCE_TAG --set web.tag=$CIRLCE_TAG --set timestamp="$(date +%s)" --set web.pullPolicy=IfNotPresent --set php.pullPolicy=IfNotPresent

workflows:
  version: 2
  build-deploy:
    jobs:
      - lint:
          filters:
            branches:
              ignore:
                - master
      - test:
          filters:
            branches:
              ignore:
                - master
      - buildAndPush:
          filters:
            branches:
              ignore:
                - master
          requires:
            - lint
            - test
      - deployDevelopment:
          requires:
            - buildAndPush
          filters:
            branches:
              only:
                - develop
      - deployStaging:
          requires:
            - buildAndPush
          filters:
            branches:
              only:
                - /release-.*/
      - deployProduction:
          requires:
            - buildAndPush
          filters:
            tags:
              only:
                - /prodbuild-.*/
            branches:
              ignore: /.*/
